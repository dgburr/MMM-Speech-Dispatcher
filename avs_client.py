#!/usr/bin/env python
# File:        avs_client.py
# Created:     29/03/2019 by Daniel Burr <dburr@dburr.net>
# Description: Python client for communicating with AVS (Alexa Voice Service)
# License:     GNU Public License, version 3
#
# Uses pico2wave (from the Pico Text-to-Speech engine) to convert
# the request to speech.  This speech is then sent to AVS using the
# alexa-client module.
#
# Based on alexa-client (https://github.com/ewenchou/alexa-client.git)
#
# FIXME:
# 1. Optimise by doing parallel encoding/playback
# 2. Improve accuracy by improving festival/pico2wave quality

import os, getopt, sys, signal
from alexa_client import AlexaClient
import subprocess
import tempfile


running = True

def signal_handler(signal, frame):
    global running
    running = False


class AlexaQuery:
    def __init__(self, text):
        # outgoing request: WAV file generated by TTS engine
        self.audio_file_request = None
        # incoming response: MP3 file received from AVS
        self.audio_file_response = None

        # generate outgoing request
        self.tts(text)


    def __del__(self):
        if self.audio_file_request:
            self.audio_file_request.close()
            os.unlink(self.audio_file_request.name)
        if self.audio_file_response:
            self.audio_file_response.close()
            os.unlink(self.audio_file_response.name)


    def tts(self, text):
        with tempfile.NamedTemporaryFile(delete = False, suffix=".wav") as outfile:
            self.audio_file_request = outfile
            p = subprocess.Popen(["pico2wave", "-w", outfile.name, "Simon says, " + text])
            p.communicate()


    def has_response(self):
        return self.audio_file_response != None


    def play_response(self):
        if not self.has_response():
            return

        p = subprocess.Popen(["mpg123", "-q", self.audio_file_response.name])
        p.communicate()


    def process_request(self, alexa):
        if self.has_response():
            return

        with tempfile.NamedTemporaryFile(delete = False) as outfile:
            self.audio_file_response = outfile
            alexa.ask(self.audio_file_request.name, outfile.name)


def help(name):
    print("%s: python wrapper for communicating with the Alexa Voice Service\n" % name)
    print("Usage:")
    print("\t--debug: Increase verbosity")
    print("\t--help:  This message\n")
    sys.exit(2)


def main():
    # capture SIGINT signal, e.g., Ctrl+C
    signal.signal(signal.SIGINT, signal_handler)

    try:
        opts, args = getopt.getopt(sys.argv[1:], "dh", ["debug", "help"])
    except getopt.GetoptError as err:
        print(str(err))
        help(sys.argv[0])
    debug = False
    for opt, arg in opts:
        if opt in ("-d", "--debug"):
            debug = True
        else:
            help(sys.argv[0])
            sys.exit()

    alexa = AlexaClient()

    while running == True:
        incoming_cmd = raw_input()
        # in case a Ctrl+C was received while waiting for keyboard input
        if running == False:
            break
        query = AlexaQuery(incoming_cmd)
        query.process_request(alexa)
        if query.has_response():
            query.play_response()
        del query

        print("FINISHED_UTTERANCE")
        sys.stdout.flush()

    alexa.clean()


if __name__ == "__main__":
    main()
